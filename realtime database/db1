function isTokenValid(token) {
		    const sheetID = "1pAZDj2a21BGKo1N4gLm8eQDNr3fKL1YcVzq-2RBPzNk";
		    const tokenSheet = SpreadsheetApp.openById(sheetID).getSheetByName("Tokens");
		    
		    // Obtenha todos os tokens autorizados da planilha
		    const authorizedTokens = tokenSheet.getRange("A:A").getValues().flat();
		    
		    // Verifique se o token fornecido está na lista de tokens autorizados
		    return authorizedTokens.includes(token);
}

// Função para obter a ID da planilha
function GetSpreadsheetID() {
		    const sheetID = "1pAZDj2a21BGKo1N4gLm8eQDNr3fKL1YcVzq-2RBPzNk";
		    return ContentService.createTextOutput(sheetID);
}

// Função principal que manipula as solicitações
function doPost(e) {
		    const sheetID = "1pAZDj2a21BGKo1N4gLm8eQDNr3fKL1YcVzq-2RBPzNk";
		    const lock = LockService.getScriptLock();
		    lock.tryLock(30000);
		    if (lock.hasLock()) {
				        // Obtenha o token da solicitação
				        const tokens = e.parameter.token.split(","); // Separar os tokens por vírgula
				        
				        // Iterar sobre todos os tokens fornecidos
				        for (let j = 0; j < tokens.length; j++) {
						            const token = tokens[j];
						            
						            // Verifique se o token é válido
						            if (!isTokenValid(token)) {
								                return ContentService.createTextOutput("Token inválido. Acesso negado.");
								            }
						            
						            // Verifique se a solicitação é para obter a ID da planilha
						            if (e.parameter.Function === "GetSpreadsheetID") {
								                return GetSpreadsheetID();
								            }
						            
						            // Execute a função SheetDB agora que o token foi verificado
						            const result = SheetDB(sheetID, e, token);
						            
						            // Se a função retornar algo diferente de null, significa que a solicitação foi processada com sucesso
						            if (result !== null) {
								                return result;
								            }
						        }
				    }
}

function SheetDB(sheet, e, token) {
		    var op = e.parameter.Function;
		    var pg = e.parameter.page;
		    var ss = SpreadsheetApp.openById(sheet);
		    var pages = pg.split(","); // Separar as páginas por vírgula
		    
		    for (let i = 0; i < pages.length; i++) {
				        var sa = ss.getSheetByName(pages[i]);
				        
				        switch (op) {
									case "atualizarValoresItens":
									    return atualizarValoresItens(e, sa, token);	
						            case "UpdatePageItem":
						                return UpdatePageItem(e, sa, token);
									case "TrocarItensLinha":
									    return TrocarItensLinha(e, sa, token);	
									case "CreateRow":
									    return Create_row(e, sa, token);
								    case "DeleteRow":
									    return Delete_row(e, sa, token);			
						            case "UpdateRow":
						                return Update_row(e, sa, token);
						            case "UpdateValue":
						                return Update_value(e, sa, token);
									case "RecoverData":
									    return RecoverData(e, sa, token);
									case "ExportJSON":
									    return Export_JSON(e, sa, token);
						            case "SearchData":
						                return Search_Data(e, sa, token);
						            default:
						                return ContentService.createTextOutput("It is not a Function");
						        }
				    }
}

function RecoverData(e, sa) {
	  var data = readData_(sa);
	
	  function readData_(sa) {
		    var columns = sa.getRange(1, 1, 1, sa.getLastColumn()).getValues()[0];
		    var rows = sa.getRange(2, 1, sa.getLastRow() - 1, sa.getLastColumn()).getValues();
		    data = [];
		
		    for (var r = 0, l = rows.length; r < l; r++) {
			      var row = rows[r],
			        record = {};
			
			      for (var p in columns) {
				        record[columns[p]] = row[p];
				      }
			      
			      // Verificando se os valores das chaves estão na mesma linha
			      if (e.parameter.search != null && e.parameter.search2 != null) {
				        if (record[e.parameter.columnID].toString().indexOf(e.parameter.search) !== -1 &&
				            record[e.parameter.columnID2].toString().indexOf(e.parameter.search2) !== -1) { 
					          data.push(record);
					        }
				      } else if (e.parameter.search != null) {
				        if (record[e.parameter.columnID].toString().indexOf(e.parameter.search) !== -1) { 
					          data.push(record);
					        }
				      } else if (e.parameter.search2 != null) {
				        if (record[e.parameter.columnID2].toString().indexOf(e.parameter.search2) !== -1) { 
					          data.push(record);
					        }
				      } else {
				        data.push(record);
				      }
			    }
		    return data;
		  }
	
	  Logger.log(JSON.stringify(data))
	  return ContentService.createTextOutput(JSON.stringify(data));
}

function UpdatePageItem(e, sa, token) {
		    const pages = e.parameter.page.split(","); // Separar as páginas por vírgula
		    const ss = SpreadsheetApp.getActiveSpreadsheet();
		    
		    for (let i = 0; i < pages.length; i++) { // Iterar sobre todas as páginas fornecidas
				        const page = pages[i];
				        const sheet = ss.getSheetByName(page);
				        
				        if (!sheet) {
						            return ContentService.createTextOutput("Página " + page + " não encontrada na planilha.");
						        }
				        
				        const idColumnIndex = sheet.getRange("1:1").getValues()[0].indexOf("ID");
				        const itemToMoveID = e.parameter.itemToMove;
				        const itemToReplaceID = e.parameter.itemToReplace;
				        const columnToModify = e.parameter.columnToModify;
				        
				        if (idColumnIndex !== -1) {
						            const newValueForItemToMove = e.parameter.newValueForItemToMove;
						            const newValueForItemToReplace = e.parameter.newValueForItemToReplace;
						            const columnToModifyIndex = sheet.getRange("1:1").getValues()[0].indexOf(columnToModify) + 1;
						            
						            // Procurar o item movido na página atual
						            const itemToMoveRowIndex = FindLinesOnPage(sheet, idColumnIndex, itemToMoveID);
						            if (itemToMoveRowIndex !== -1) {
								                sheet.getRange(itemToMoveRowIndex, columnToModifyIndex).setValue(newValueForItemToMove);
								            }
						            
						            // Procurar o item substituído na página atual
						            const itemToReplaceRowIndex = FindLinesOnPage(sheet, idColumnIndex, itemToReplaceID);
						            if (itemToReplaceRowIndex !== -1) {
								                sheet.getRange(itemToReplaceRowIndex, columnToModifyIndex).setValue(newValueForItemToReplace);
								            }
						        } else {
						            return ContentService.createTextOutput("Coluna 'ID' não encontrada na página " + page + ".");
						        }
				    }
		    
		    return ContentService.createTextOutput("Valores dos itens atualizados com sucesso em todas as páginas fornecidas.");
}

function FindLinesOnPage(sheet, columnIndex, itemID) {
		    const values = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
		    
		    for (let i = 0; i < values.length; i++) {
				        if (values[i][columnIndex] == itemID) {
						            return i + 2; // Ajustar o índice para corresponder à linha real
						        }
				    }
		    
		    return -1; // Retorna -1 se o item não for encontrado
}

function TrocarItensLinha(e, sa) {
			    const page = e.parameter.page;
			    const ss = SpreadsheetApp.getActiveSpreadsheet();
			    const sheet = ss.getSheetByName(page);
			    
			    if (!sheet) {
						        return ContentService.createTextOutput("Página não encontrada na planilha.");
						    }
			
			    const idColumnIndex = sheet.getRange("1:1").getValues()[0].indexOf("ID");
			    const itemToMoveID = e.parameter.itemToMove;
			    const itemToReplaceID = e.parameter.itemToReplace;
			
			    if (idColumnIndex !== -1) {
						        const lastRow = sheet.getLastRow();
						        const values = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
						        
						        let itemToMoveRowIndex = -1;
						        let itemToReplaceRowIndex = -1;
						
						        // Procurar pelos índices das linhas dos itens
						        for (let i = 0; i < values.length; i++) {
									            if (values[i][idColumnIndex] == itemToMoveID) {
												                itemToMoveRowIndex = i + 2; // Ajustar o índice para corresponder à linha real
												            }
									            if (values[i][idColumnIndex] == itemToReplaceID) {
												                itemToReplaceRowIndex = i + 2; // Ajustar o índice para corresponder à linha real
												            }
									        }
						
						        // Verificar se ambos os itens foram encontrados
						        if (itemToMoveRowIndex !== -1 && itemToReplaceRowIndex !== -1) {
									            // Armazenar temporariamente a linha a ser movida
									            const temp = sheet.getRange(itemToMoveRowIndex, 1, 1, sheet.getLastColumn()).getValues()[0];
									
									            // Mover a linha
									            sheet.getRange(itemToMoveRowIndex, 1, 1, sheet.getLastColumn()).setValues(sheet.getRange(itemToReplaceRowIndex, 1, 1, sheet.getLastColumn()).getValues());
									            sheet.getRange(itemToReplaceRowIndex, 1, 1, sheet.getLastColumn()).setValues([temp]);
									
									            return ContentService.createTextOutput("Itens trocados com sucesso.");
									        } else {
									            return ContentService.createTextOutput("Itens não encontrados. Verifique os itens fornecidos.");
									        }
						    } else {
						        return ContentService.createTextOutput("Coluna 'ID' não encontrada na planilha.");
						    }
}

function atualizarValoresItens(e, sa) {
			    const page = e.parameter.page;
			    const ss = SpreadsheetApp.getActiveSpreadsheet();
			    const sheet = ss.getSheetByName(page);
			    
			    if (!sheet) {
						        return ContentService.createTextOutput("Página não encontrada na planilha.");
						    }
			
			    const idColumnIndex = sheet.getRange("1:1").getValues()[0].indexOf("ID");
			    const itemToMoveID = e.parameter.itemToMove;
			    const itemToReplaceID = e.parameter.itemToReplace;
			    const columnToModify = e.parameter.columnToModify;
			
			    if (idColumnIndex !== -1) {
						        const itemToMoveRowIndex = findRowIndex(sheet, idColumnIndex, itemToMoveID);
						        const itemToReplaceRowIndex = findRowIndex(sheet, idColumnIndex, itemToReplaceID);
						
						        if (itemToMoveRowIndex !== -1 && itemToReplaceRowIndex !== -1) {
									            const newValueForItemToMove = e.parameter.newValueForItemToMove;
									            const newValueForItemToReplace = e.parameter.newValueForItemToReplace;
									            const columnToModifyIndex = sheet.getRange("1:1").getValues()[0].indexOf(columnToModify) + 1;
									
									            sheet.getRange(itemToMoveRowIndex, columnToModifyIndex).setValue(newValueForItemToMove);
									            sheet.getRange(itemToReplaceRowIndex, columnToModifyIndex).setValue(newValueForItemToReplace);
									
									            return ContentService.createTextOutput("Valores dos itens atualizados com sucesso.");
									        } else {
									            return ContentService.createTextOutput("Itens não encontrados. Verifique os itens fornecidos.");
									        }
						    } else {
						        return ContentService.createTextOutput("Coluna 'ID' não encontrada na planilha.");
						    }
}

function findRowIndex(sheet, columnIndex, itemID) {
			    const values = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
			
			    for (let i = 0; i < values.length; i++) {
						        if (values[i][columnIndex] == itemID) {
									            return i + 2; // Ajustar o índice para corresponder à linha real
									        }
						    }
			
			    return -1; // Retorna -1 se o item não for encontrado
}

function Create_row(e, sa) {
					  var dataS = JSON.parse(e.parameter.data);
					  if (e.parameter.ID == "yes") {
										    var timer = Date.now();
										    dataS.unshift(timer);
										    sa.appendRow(dataS);
										  }else {sa.appendRow(dataS);}
					  return ContentService.createTextOutput("Created");
}

function Delete_row(e, sa) {
					  var id = e.parameter.rowID;
					  var row = Get_row(sa, id);
					  if (row != "NOT found"){ 
										    sa.deleteRow(row);
										    return ContentService.createTextOutput("Deleted");
										  }else {return ContentService.createTextOutput("ID not found");}  
}

function Update_row(e, sa){
					  var dataS = JSON.parse(e.parameter.data);
					  var row = Get_row(sa, e.parameter.rowID);
					  if (row != "NOT found"){ 
										    sa.getRange(row,1,1,dataS.length).setValues([dataS]);
										    return ContentService.createTextOutput("Updated")
										  }else {return ContentService.createTextOutput("ID not found");}
}

function Update_value(e, sa) {
					    var dataS = e.parameter.data;
					    var column = Get_column(sa, e.parameter.columnID);
					    var row = Get_row(sa, e.parameter.rowID);
					
					    if (column !== "NOT found") {
										        if (row !== "NOT found") {
															            sa.getRange(row, column).setValue(" " + dataS);
															            return ContentService.createTextOutput("Updated");
															        } else {
															            return ContentService.createTextOutput("Row NOT Found");
															        }
										    } else {
										        return ContentService.createTextOutput("Column NOT Found");
										    }
}

function Export_JSON(e, sa) {
					  var data = readData_(sa);
					  function readData_(sa) {
										    var columns = sa.getRange(1, 1, 1, sa.getLastColumn()).getValues()[0];
										    var rows = sa.getRange(2, 1, sa.getLastRow() - 1, sa.getLastColumn()).getValues();
										        data = [];
										    for (var r = 0, l = rows.length; r < l; r++) {
															      var row = rows[r],
															          record = {};
															
															      for (var p in columns) {
																				        record[columns[p]] = row[p];
																				      }
															      if (e.parameter.search != null) {
																				      if (record[e.parameter.columnID].toString() === e.parameter.search) { data.push(record);}}else{data.push(record);}
															    }
										    return data;
										  }
					  Logger.log(JSON.stringify(data))
					  return ContentService.createTextOutput(JSON.stringify(data));
}

function Search_Data(e, sa) {
			  var data = readData_(sa);
			  var columns = Object.keys(data[0]); // Obter os nomes das colunas
			  var csvString = '"' + columns.join('","') + '"\n'; // Adicionar nomes de coluna formatados como CSV
			
			  data.forEach(function(record) {
						    var row = columns.map(function(column) {
									      return record[column];
									    });
						    csvString += '"' + row.join('","') + '"\n'; // Adicionar valores de registro formatados como CSV
						  });
			
			  Logger.log(csvString);
			  return ContentService.createTextOutput(csvString);
}

function readData_(sa) {
			  var columns = sa.getRange(1, 1, 1, sa.getLastColumn()).getValues()[0];
			  var rows = sa.getRange(2, 1, sa.getLastRow() - 1, sa.getLastColumn()).getValues();
			  var data = [];
			
			  for (var r = 0, l = rows.length; r < l; r++) {
						    var row = rows[r];
						    var record = {};
						
						    for (var p in columns) {
									      record[columns[p]] = row[p];
									    }
						    data.push(record);
						  }
			  return data;
}

function Get_column(sa, id) {
					  var lc = sa.getLastColumn();
					  var range = sa.getRange(1,1,1,lc).getValues();
					  var column = range[0].indexOf(id);
					  if (column != -1) {
										    return column + 1;
										  }else {return "NOT found";}
}

function Get_row(sa, id) {
				  var lr = sa.getLastRow();
				  var range = sa.getRange(1,1,lr).getValues();
				  var row = range.findIndex(r => r[0] == id);
				  if (row != -1){
								    return row + 1;
								  }else {return "NOT found";}
}
